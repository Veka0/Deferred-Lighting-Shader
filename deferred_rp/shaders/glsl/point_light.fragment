#include "fragmentHeader.h"
#include "uniformWorldConstants.h"
#line 3

precision highp float;

#ifdef GL_EXT_shader_framebuffer_fetch
#define gl_LastFragColorARM finalColor
inout vec4 finalColor;
#else
out vec4 finalColor;
#endif

in highp vec4 color;
in highp vec3 position;
in highp vec3 origin;
flat in float ditherFactor;

const float Kc = 1.0;
const float Kl = 0.14;
const float Kq = 0.07;

const float specShine = 10.0;
const float specIntensity= 0.1;
const float fogIntensity = 0.04;


const float ditherSpread = 10.0/255.0;

const float bayer8[64] = float[64](
-0.9688, 0.0312, -0.7188, 0.2812, -0.9062, 0.0938, -0.6562, 0.3438,
0.5312, -0.4688, 0.7812, -0.2188, 0.5938, -0.4062, 0.8438, -0.1562,
-0.5938, 0.4062, -0.8438, 0.1562, -0.5312, 0.4688, -0.7812, 0.2188,
0.9062, -0.0938, 0.6562, -0.3438, 0.9688, -0.0312, 0.7188, -0.2812,
-0.875, 0.125, -0.625, 0.375, -0.9375, 0.0625, -0.6875, 0.3125,
0.625, -0.375, 0.875, -0.125, 0.5625, -0.4375, 0.8125, -0.1875,
-0.5, 0.5, -0.75, 0.25, -0.5625, 0.4375, -0.8125, 0.1875,
1.0, 0.0, 0.75, -0.25, 0.9375, -0.0625, 0.6875, -0.3125
);


float calcFogLight(float fragDist, vec3 dir) {
	float d = dot(dir, origin.xyz);
	vec3 orthLvec = origin.xyz - dir * d;
	
	float h = length(orthLvec)+1.0;
	float oL = length(origin.xyz - orthLvec)*sign(d);

	return (atan((fragDist-oL)/h) - atan(-oL/h))/h;
}

void main()
{
	#ifndef VOLUMETRIC_FOG
	float depth = gl_LastFragDepthARM;
	if (depth == 1.0) {
		discard;
	}
	#endif
	
	float i = mod(gl_FragCoord.x-0.5, 2.0);
	
	#ifdef VOLUMETRIC_FOG
	float viewZ = PROJ[3][2] / ((gl_LastFragDepthARM * 2.0 - 1.0) + PROJ[2][2]);
	#else
	float viewZ = PROJ[3][2] / ((depth * 2.0 - 1.0) + PROJ[2][2]);
	#endif
	
	vec3 viewPos = viewZ * position / position.z;
	
	vec3 L = origin - viewPos;
	float dist = length(L);
	L /= dist;
	
	vec3 N = normalize(cross(dFdy(viewPos), dFdx(viewPos)));
	
	float viewLen = length(viewPos);
	vec3 viewVec = -viewPos/viewLen;
	
	vec3 h = normalize(L+viewVec);
	
	float specular = specIntensity*pow(max(dot(N, h), 0.0), specShine);
	float diffuse = dot(N, L);
	float attenuation = 1.0 / (Kc + Kl * dist + Kq * dist*dist);

	float dither = ditherSpread * ditherFactor * bayer8[int(0.5*gl_FragCoord.x)%8 + 8*(int(0.5*gl_FragCoord.y)%8)];
	
	vec3 albedo = -dFdx((1.0-i)*gl_LastFragColorARM.rgb);
	
#ifdef VOLUMETRIC_FOG
	float fog = fogIntensity*calcFogLight(viewLen, normalize(position.xyz));
	finalColor = i*vec4((attenuation * step(0.0, diffuse) * (specular + diffuse*albedo) + fog) * 16.0*color.rgb + dither, 1.0);
#else
	finalColor = i*vec4((attenuation * step(0.0, diffuse) * (specular + diffuse*albedo)) * 16.0*color.rgb + dither, 1.0);
#endif
}
